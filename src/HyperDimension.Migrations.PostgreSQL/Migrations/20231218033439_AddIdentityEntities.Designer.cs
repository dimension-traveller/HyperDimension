// <auto-generated />
using System;
using System.Collections.Generic;
using HyperDimension.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HyperDimension.Migrations.PostgreSQL.Migrations
{
    [DbContext(typeof(HyperDimensionDbContext))]
    [Migration("20231218033439_AddIdentityEntities")]
    partial class AddIdentityEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.ApiToken", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("EntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("ApiTokens");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.ExternalProvider", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserIdentifier")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("ExternalProviders");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("Permissions")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("EntityId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.Totp", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("Key")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset>("RegistrationTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.ToTable("Totps");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.TotpRecoveryCode", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("TotpEntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset?>("UsedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("EntityId");

                    b.HasIndex("TotpEntityId");

                    b.ToTable("TotpRecoveryCodes");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int>("FailedAccessAttempts")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset?>("LockoutEndAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TotpEntityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("TwoFactorEmailEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("TwoFactorTotpEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.HasIndex("TotpEntityId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.WebAuthn", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AaGuid")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CredType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("CredentialId")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateTimeOffset>("RegDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SignatureCounter")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UserEntityId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("UserHandle")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("EntityId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("WebAuthnDevices");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Security.Token", b =>
                {
                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BindTo")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EntityId");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.DataProtection.EntityFrameworkCore.DataProtectionKey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FriendlyName")
                        .HasColumnType("text");

                    b.Property<string>("Xml")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DataProtectionKeys");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesEntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("RolesEntityId", "UsersEntityId");

                    b.HasIndex("UsersEntityId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.ApiToken", b =>
                {
                    b.HasOne("HyperDimension.Domain.Entities.Identity.User", "User")
                        .WithMany("ApiTokens")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.ExternalProvider", b =>
                {
                    b.HasOne("HyperDimension.Domain.Entities.Identity.User", "User")
                        .WithMany("ExternalProviders")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.TotpRecoveryCode", b =>
                {
                    b.HasOne("HyperDimension.Domain.Entities.Identity.Totp", null)
                        .WithMany("RecoveryCodes")
                        .HasForeignKey("TotpEntityId");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.User", b =>
                {
                    b.HasOne("HyperDimension.Domain.Entities.Identity.Totp", "Totp")
                        .WithMany()
                        .HasForeignKey("TotpEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Totp");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.WebAuthn", b =>
                {
                    b.HasOne("HyperDimension.Domain.Entities.Identity.User", "User")
                        .WithMany("WebAuthnDevices")
                        .HasForeignKey("UserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("HyperDimension.Domain.Entities.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HyperDimension.Domain.Entities.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UsersEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.Totp", b =>
                {
                    b.Navigation("RecoveryCodes");
                });

            modelBuilder.Entity("HyperDimension.Domain.Entities.Identity.User", b =>
                {
                    b.Navigation("ApiTokens");

                    b.Navigation("ExternalProviders");

                    b.Navigation("WebAuthnDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
