Observability:
  Name: HyperDimension
  Namespace: production
  Version: "@Version"                                                 # Use @Version to get the version from the assembly
  Port: 3200
  Logging:
    Template: "[{Timestamp:HH:mm:ss} {Level:u3}] {Message:lj}{NewLine}{Exception}"
    MinimumLevel: Information                                         # Verbose, Debug, Information, Warning, Error, Fatal
    Override:
      Microsoft: Warning
      Microsoft.Hosting.Lifetime: Information
      Microsoft.EntityFrameworkCore.Database.Command: Warning
    Console:
      Enabled: true
    File:
      Enabled: false
      Path: ./data/logs/hd-.log
      Interval: Day                                                   # Infinite, Year, Month, Day, Hour, Minute
    OpenTelemetry:
      Enabled: false
      Endpoint: "http://127.0.0.1:4318/v1/logs"
      Protocol: HttpProtobuf                                          # HttpProtobuf, Grpc
  Tracing:
    HttpClientFilter:
      Hosts:
        - localhost:4318
    Console:
      Enabled: false
      Target: Console                                                 # Console, Debug
    OpenTelemetry:
      Enabled: false
      Endpoint: "http://127.0.0.1:4318"
      Protocol: Grpc                                                  # HttpProtobuf, Grpc
  Metrics:
    ExtraLabels:
#     - Key: Value

Application:
  FrontendUrl: http://localhost:3000
  AccountVerificationUrl: http://localhost:3000/account/verify?token={TOKEN}
  Path:
    Login: /account/login
    TwoFactor: /account/2fa

Metadata:
  SiteName: Hyper Dimension
  Issuer: Dimension Traveller

Database:
  Type: SQLite                                                        # SQLite, SQLServer, PostgreSQL, MySQL
  ConnectionString: "Data Source=./data/HyperDimension.db;"           # Check out: connectionstrings.com
  Tracing: true

Search:
  Type: Database                                                      # Database, ElasticSearch, MeiliSearch, Algolia

# Database do not need configuration

# ElasticSearch:
#   Nodes:
#     - http://localhost:9200
#   AuthenticationMethod: Basic                                       # None, Basic, ApiKey
#   Username: elastic                                                 # When AuthenticationMethod is Basic
#   Password: password                                                # When AuthenticationMethod is Basic
#   #   ApiKey: your_api_key                                          # When AuthenticationMethod is ApiKey
#   IndexPrefix: hd-
#   CertificateFingerprint: 1234567890abcdef1234567890abcdef12345678  # Leave empty if you don't need to verify the certificate

# MeiliSearch:
#   Url: http://localhost:7700
#   ApiKey: masterKey
#   IndexPrefix: hd-

# Algolia:
#   ApplicationId: your-id
#   ApiKey: your-key
#   IndexPrefix: hd-

DataProtection:
  EnableCertificate: false

  Certificate:
    Path: ./data/cert/hd.pfx
    Password: 123

  RotatedCertificates:
    - Path: ./data/cert/hd-rotated.pfx
      Password: 123

Storage:
  Type: FileSystem                    # FileSystem, S3

  FileSystem:
    RootPath: ./data/blob

# S3:
#   Flavor: Generic                   # Generic, Amazon
#   Endpoint: http://localhost:9000   # Only for Generic
#   AccessKey: minio                  # Both
#   SecretKey: minio123               # Both
#   BucketName: hyper-dimension       # Both
#   Region: ap-east-1                 # Both
#   ForcePathStyle: true              # Only for Generic

Cache:
  Type: Memory

  Memory:
    Size: 1024                        # In MB

# Redis:
#   ConnectionString: localhost:6379
#   Database: 0
#   KeyPrefix: hd-
#   Tracing: true

Email:
  Sender: Smtp                       # Smtp, MailGun, SendGrid
  From: hyperdimension@example.com
  FromName: Hyper Dimension

  Smtp:
    Server: localhost
    Port: 587
    User: your-username
    Password: your-password
    UseSsl: true
    RequiresAuthentication: true
    SocketOptions: Auto               # Auto, SslOnConnect, StartTls, StartTlsWhenAvailable

# MailGun:
#   ApiKey: 123
#   Domain: example.com
#   Region: US                        # USA, EU

# SendGrid:
#   ApiKey: 123
#   SandBoxMode: false


Identity:
  Token:
    AccessTokenExpiration: 3600       # In seconds, default: 3600 (1 hour)
    RefreshTokenExpiration: 2592000   # In seconds, default: 2592000 (30 days)

  WebAuthn:
    Timeout: 60000
    ServerIcon: ""
    ServerDomain: ""
    ServerName: ""
    Origins:
      - http://localhost:3000
      - https://localhost:7200

  Providers:
    - Name: Database
      Id: database
      Type: Database

#   - Name: Discord
#     Id: discord
#     Type: Discord
#     Icon: "{Embedded:discord}"
#     Config:
#       ClientId: 123
#       ClientSecret: 123

#   - Name: GitHub
#     Id: github
#     Type: GitHub
#     Icon: "{Embedded:github}"
#     Config:
#       ClientId: 123
#       ClientSecret: 123

#   - Name: Google
#     Id: google
#     Type: Google
#     Icon: "{Embedded:google}"
#     Config:
#       ClientId: 123
#       ClientSecret: 123

#   - Name: Microsoft
#     Id: microsoft
#     Type: Microsoft
#     Icon: "{Embedded:microsoft}"
#     Config:
#       ClientId: 123
#       ClientSecret: 123

#   - Name: Your OIDC Provider
#     Id: oidc
#     Type: OpenIdConnect
#     Icon: "https://url-to-your-icon/oidc.svg.png.jpg.webp"
#     Config:
#       Authority: "https://localhost:5001"
#       MetadataAddress: "https://localhost:5001/.well-known/openid-configuration"
#       Scope:
#         - openid
#         - profile
#         - email
#       ClientId: 123
#       ClientSecret: 123
#       ClaimTypes:
#         UniqueId: sub
#         Username: preferred_username
#         Name: name
#         Email: email
#       OpenIdConnectConfiguration:
#         # See https://learn.microsoft.com/en-us/dotnet/api/microsoft.identitymodel.protocols.openidconnect.openidconnectconfiguration?view=msal-web-dotnet-latest&viewFallbackFrom=net-8.0
