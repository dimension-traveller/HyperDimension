using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace HyperDimension.Analyzer.Generator;

[Generator]
public class SearchableGenerator : IIncrementalGenerator
{
    private const string Namespace = "HyperDimension.Analyzer.Generator";

    private const string HasSearchablePropertyAttributeSource = $$"""
// <auto-generated/>
namespace {{Namespace}}
{
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class HasSearchablePropertyAttribute : System.Attribute
    {
    }
}
""";

    private const string SearchableAttributeSource = $$"""
// <auto-generated/>
namespace {{Namespace}}
{
    [System.AttributeUsage(System.AttributeTargets.Property)]
    public class SearchableAttribute : System.Attribute
    {
    }
}
""";

    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "HasSearchablePropertyAttribute.g.cs",
            SourceText.From(HasSearchablePropertyAttributeSource, Encoding.UTF8)));

        context.RegisterPostInitializationOutput(ctx => ctx.AddSource(
            "SearchableAttribute.g.cs",
            SourceText.From(SearchableAttributeSource, Encoding.UTF8)));

        var provider = context.SyntaxProvider
            .CreateSyntaxProvider(
                (s, _) => s is ClassDeclarationSyntax,
                (ctx, _) => FilterClassDeclarationSyntax(ctx))
            .Where(t => t.attributeFound)
            .Select((t, _) => t.syntax);

        context.RegisterSourceOutput(context.CompilationProvider.Combine(provider.Collect()),
            ((ctx, t) => GenerateCode(ctx, t.Left, t.Right)));
    }

    private static (ClassDeclarationSyntax syntax, bool attributeFound) FilterClassDeclarationSyntax(GeneratorSyntaxContext context)
    {
        var classDeclarationSyntax = (ClassDeclarationSyntax)context.Node;

        var attributeSyntaxList = classDeclarationSyntax
            .AttributeLists
            .SelectMany(x => x.Attributes);

        // Go through all attributes of the class.
        foreach (var attributeSyntax in attributeSyntaxList)
        {
            if (context.SemanticModel.GetSymbolInfo(attributeSyntax).Symbol is not IMethodSymbol attributeSymbol)
            {
                continue;
            }

            var attributeName = attributeSymbol.ContainingType.ToDisplayString();

            if (attributeName == $"{Namespace}.HasSearchablePropertyAttribute")
            {
                return (classDeclarationSyntax, true);
            }
        }

        return (classDeclarationSyntax, false);
    }

    private static void GenerateCode(SourceProductionContext context, Compilation compilation, ImmutableArray<ClassDeclarationSyntax> classDeclarations)
    {
        foreach (var classDeclarationSyntax in classDeclarations)
        {
            var semanticModel = compilation.GetSemanticModel(classDeclarationSyntax.SyntaxTree);

            if (semanticModel.GetDeclaredSymbol(classDeclarationSyntax) is not INamedTypeSymbol classSymbol)
            {
                continue;
            }

            var namespaceName = classSymbol.ContainingNamespace.ToDisplayString();
            var className = classSymbol.Name;
            var searchableProperties = classSymbol
                .GetMembers()
                .OfType<IPropertySymbol>()
                .Where(x => x.Type.SpecialType == SpecialType.System_String)
                .Where(x => x.GetAttributes()
                    .Any(y => y.AttributeClass?.ToDisplayString() == $"{Namespace}.SearchableAttribute"))
                .ToList();

            var propertyCode = searchableProperties
                .Select(x => x.Name)
                .Select(x => $$"""
    public string {{x}} { get; set; }
""");

            var code = $$"""
// <auto-generated/>
using HyperDimension.Domain.Abstract;
using {{namespaceName}};

namespace HyperDimension.Domain.Search;

public class {{className}}SearchableDocument : SearchableDocument
{
{{string.Join("\n", propertyCode)}}
}
""";

            context.AddSource($"{className}SearchableDocument.g.cs", SourceText.From(code, Encoding.UTF8));
        }
    }
}
